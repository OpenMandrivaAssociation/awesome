diff --git a/awesome.c b/awesome.c
index 413b64c90..cbb2d2a36 100644
--- a/awesome.c
+++ b/awesome.c
@@ -622,7 +622,7 @@ main(int argc, char **argv)
         switch(opt)
         {
           case 'v':
-            eprint_version();
+            eprint_version(&searchpath);
             break;
           case 'h':
             exit_help(EXIT_SUCCESS);
diff --git a/common/version.c b/common/version.c
index 00833a952..8eba2ec00 100644
--- a/common/version.c
+++ b/common/version.c
@@ -30,14 +30,81 @@
 #include <lauxlib.h>
 #include <xcb/randr.h> /* for XCB_RANDR_GET_MONITORS */
 
+/* Add things to the string on top of the stack */
+static void
+add_to_search_path(lua_State *L, string_array_t *searchpath, bool for_lua)
+{
+    if (LUA_TSTRING != lua_type(L, -1))
+    {
+        warn("package.path is not a string");
+        return;
+    }
+
+    foreach(entry, *searchpath)
+    {
+        int components;
+        size_t len = a_strlen(*entry);
+        lua_pushliteral(L, ";");
+        lua_pushlstring(L, *entry, len);
+        if (for_lua)
+            lua_pushliteral(L, "/?.lua");
+        else
+            lua_pushliteral(L, "/?.so");
+        lua_concat(L, 3);
+
+        if (for_lua)
+        {
+            lua_pushliteral(L, ";");
+            lua_pushlstring(L, *entry, len);
+            lua_pushliteral(L, "/?/init.lua");
+            lua_concat(L, 3);
+
+            components = 2;
+        } else {
+            components = 1;
+        }
+        lua_concat(L, components + 1); /* concatenate with string on top of the stack */
+    }
+
+    /* add Lua lib path (/usr/share/awesome/lib by default) */
+    if (for_lua)
+    {
+        lua_pushliteral(L, ";" AWESOME_LUA_LIB_PATH "/?.lua");
+        lua_pushliteral(L, ";" AWESOME_LUA_LIB_PATH "/?/init.lua");
+        lua_concat(L, 3); /* concatenate with thing on top of the stack when we were called */
+    } else {
+        lua_pushliteral(L, ";" AWESOME_LUA_LIB_PATH "/?.so");
+        lua_concat(L, 2); /* concatenate with thing on top of the stack when we were called */
+    }
+}
+
 /** \brief Print version message and quit program.
  * \param executable program name
  */
 void
-eprint_version(void)
+eprint_version(string_array_t *searchpath)
 {
     lua_State *L = luaL_newstate();
     luaL_openlibs(L);
+
+    /* add Lua search paths */
+    lua_getglobal(L, "package");
+    if (LUA_TTABLE != lua_type(L, 1))
+    {
+        warn("package is not a table");
+        abort();
+    }
+
+    lua_getfield(L, 1, "path");
+    add_to_search_path(L, searchpath, true);
+    lua_setfield(L, 1, "path"); /* package.path = "concatenated string" */
+
+    lua_getfield(L, 1, "cpath");
+    add_to_search_path(L, searchpath, false);
+    lua_setfield(L, 1, "cpath"); /* package.cpath = "concatenated string" */
+
+    lua_pop(L, 1); /* pop "package" */
+
     lua_getglobal(L, "_VERSION");
     lua_getglobal(L, "jit");
 
diff --git a/common/version.h b/common/version.h
index 7bf3bc908..2591a44c8 100644
--- a/common/version.h
+++ b/common/version.h
@@ -22,7 +22,9 @@
 #ifndef AWESOME_COMMON_VERSION_H
 #define AWESOME_COMMON_VERSION_H
 
-void eprint_version(void) __attribute__ ((noreturn));
+#include "luaa.h" /* yup, this should not be here */
+
+void eprint_version(string_array_t *) __attribute__ ((noreturn));
 const char *awesome_version_string(void);
 const char *awesome_release_string(void);
